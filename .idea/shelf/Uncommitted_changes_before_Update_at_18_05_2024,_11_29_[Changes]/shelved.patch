Index: creator_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/creator_test.py b/interface/create_test.py
rename from creator_test.py
rename to interface/create_test.py
--- a/creator_test.py	(revision a3b9a4363f0c4c8f0330316e01125784d01c83bb)
+++ b/interface/create_test.py	(date 1715916690246)
@@ -1,9 +1,12 @@
+from repository import put_test
+from models import Test
+
 class TestCreator:
     def __init__(self):
         self.new_test = {}
 
-
-    def create_test(self):
+    def creator_test(self):
+        '''Интерфейс по созданию теста, после создаем объект Test и в него передаем dict тест'''
         new_subject = input('Введите название предмета: ')
         self.new_test['subject'] = new_subject
         new_questions_count = input('Введите колличество вопросов: ')
@@ -32,4 +35,7 @@
                 self.new_test['correct'].append(new_correct)
             else:
                 self.new_test['correct'] = [new_correct]
-        return self.new_test
+        put_test(self.new_test)
+
+
+# TODO: реализовать исключения при неправильном вводе данных теста
\ No newline at end of file
Index: repository.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n# result = {\n#     'questions_count': 10,\n#     'timer': True,\n#     'scoring_system': 1,\n#     'level': 'beginner',\n#     'questions': ['q_1', 'q_2', 'q_3', 'q_4', 'q_5', 'q_6', 'q_7', 'q_8', 'q_9', 'q_10', ],\n#     'answer': ['d', 'a', 'b', 'c', 'b', 'c', 'a', 'c', 'd', 'd'],\n#     'correct': 2\n# }\n#\n# to_json = {'test_1': astronomy, 'test_1_result': result}\n#\n# with open('storage.json', 'w') as f:\n#     json.dump(to_json, f)\n#     f.write('\\n')\n#\n#\n# with open('storage.json') as f:\n#     print(f.read())\n\n\n\n\n\n\n# json storage\n# методы для получения теста\n# репозиторий получает данные, добавить методы на добавление нового теста)\n# (репозиторий отдает объекты теста и принимает объект теста а не сырые данные,\n# покрыть тестами (как оттестировать ф-ии получения и записи в storage не используя основной storage, копировать) сетап?\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/repository.py b/repository.py
--- a/repository.py	(revision a3b9a4363f0c4c8f0330316e01125784d01c83bb)
+++ b/repository.py	(date 1715762699952)
@@ -1,32 +1,89 @@
+import json
+from models import Test
+
+FILE_NAME = 'storage/storage.json'
+
+def get_test(key_dict):
+    '''Берем из json тест по test_id'''
+    try:
+        with open(FILE_NAME, 'r', encoding='utf-8') as f:
+            file_content = json.load(f)
+            try:
+                return file_content[key_dict]
+            except KeyError:
+                print('Такого теста нет')
+    except json.JSONDecodeError:
+        print('Некоректная запись в файле json')
+
+
+def put_test(test: dict):
+    '''Добавляем в json тест, присвоив ему следующий порядковый номер test_id'''
+    try:
+        with open(FILE_NAME, 'r', encoding='utf-8') as f:
+            file_content = json.load(f)
+            set_key = file_content.keys()
+        with open(FILE_NAME, 'w', encoding='utf-8') as f:
+            if not set_key:
+                file_content[1] = test
+                json.dump(file_content, f, indent=2)
+            else:
+                set_key = list(file_content.keys())
+                key_json = check_next_id(set_key)
+                file_content[str(key_json)] = test
+                json.dump(file_content, f, indent=2)
+    except json.JSONDecodeError:
+        print('Некоректная запись в файле json')
+
+
+def check_next_id(id_lst: list):
+    '''Проверяет ID и возвращает ближайший свободный по порядку'''
+    if not id_lst:
+        return 1
+    num_1 = 0
+    num_2 = 0
+    for i in id_lst:
+        num_1 = num_2
+        num_2 = int(i)
+        if num_2 - num_1 > 1:
+            return num_1 + 1
+    return int(id_lst[-1]) + 1
+
+
+def del_test(test: Test):
+    '''Берем из json тест и удаляем его'''
+    if isinstance(test, Test):
+        with open(FILE_NAME, 'r', encoding='utf-8') as f:
+            file_content = json.load(f)
+        with open(FILE_NAME, 'w', encoding='utf-8') as f:
+            for key, value in file_content.items():
+                if value == test:
+                    del file_content[key]
+                    json.dump(file_content, f, indent=2)
+
+
+def check_empty():
+    '''Проверяем не пустой ли json и если пустой, добовляем пустой dict'''
+    with open(FILE_NAME, 'r+', encoding='utf-8') as f:
+        file_content = f.read().strip()
+        if not file_content:
+            file_content = {}
+            json.dump(file_content, f)
+            print('Файл пустой')
+        else:
+            print('Файл не пустой')
 
-# result = {
-#     'questions_count': 10,
-#     'timer': True,
-#     'scoring_system': 1,
-#     'level': 'beginner',
-#     'questions': ['q_1', 'q_2', 'q_3', 'q_4', 'q_5', 'q_6', 'q_7', 'q_8', 'q_9', 'q_10', ],
-#     'answer': ['d', 'a', 'b', 'c', 'b', 'c', 'a', 'c', 'd', 'd'],
-#     'correct': 2
-# }
-#
-# to_json = {'test_1': astronomy, 'test_1_result': result}
-#
-# with open('storage.json', 'w') as f:
-#     json.dump(to_json, f)
-#     f.write('\n')
-#
-#
-# with open('storage.json') as f:
-#     print(f.read())
 
+def clear_json():
+    '''Чистим json, оставляем пустой dict'''
+    with open(FILE_NAME, 'w', encoding='utf-8') as f:
+        file_content = {}
+        json.dump(file_content, f)
 
 
 
 
 
-# json storage
-# методы для получения теста
-# репозиторий получает данные, добавить методы на добавление нового теста)
-# (репозиторий отдает объекты теста и принимает объект теста а не сырые данные,
-# покрыть тестами (как оттестировать ф-ии получения и записи в storage не используя основной storage, копировать) сетап?
+# TODO: покрыть тестами (как оттестировать ф-ии получения и записи в storage не используя основной storage, копировать) сетап?
+
+
 
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nfrom set_classes import Test\nfrom creator_test import TestCreator\n\n\n\n\ntest = {\n    'subject': 'astronomy',\n    'questions_count': 10,\n    'timer': True,\n    'scoring_system': 1,\n    'level': 'beginner',\n    'questions': ['q_1', 'q_2', 'q_3', 'q_4', 'q_5', 'q_6', 'q_7', 'q_8', 'q_9', 'q_10', ],\n    'answers': [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'],\n               ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'],\n               ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']],\n    'correct': ['a', 'b', 'a', 'b', 'b', 'c', 'c', 'd', 'a', 'b']\n}\n\n\n\nif __name__ == '__main__':\n    t1_new = TestCreator()\n\n    test_1 = Test(t1_new.create_test())\n    print(test_1.check_empty())\n\n    test_id = '1'\n    print(test_1.get_test(test_id))\n\n    test_1.put_test()\n\n    # test_2 = Test(t)\n    # test_2.put_test()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision a3b9a4363f0c4c8f0330316e01125784d01c83bb)
+++ b/main.py	(date 1715762699961)
@@ -1,8 +1,6 @@
-import json
-from set_classes import Test
-from creator_test import TestCreator
-
-
+from models import Test
+from repository import get_test, put_test, del_test, del_test, check_empty, clear_json
+from interface.create_test import TestCreator
 
 
 test = {
@@ -21,15 +19,12 @@
 
 
 if __name__ == '__main__':
+    check_empty()
     t1_new = TestCreator()
-
-    test_1 = Test(t1_new.create_test())
-    print(test_1.check_empty())
+    t1_new.creator_test()
 
-    test_id = '1'
-    print(test_1.get_test(test_id))
-
-    test_1.put_test()
+    # test_id = '1'
+    # print(test_1.get_test(test_id))
 
     # test_2 = Test(t)
     # test_2.put_test()
Index: storage.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage.json b/storage/storage.json
rename from storage.json
rename to storage/storage.json
--- a/storage.json	(revision a3b9a4363f0c4c8f0330316e01125784d01c83bb)
+++ b/storage/storage.json	(date 1715762699945)
@@ -1,9 +1,9 @@
 {
   "1": {
     "subject": "astronomy",
-    "questions_count": "10",
-    "timer": "True",
-    "scoring_system": "1",
+    "questions_count": 10,
+    "timer": true,
+    "scoring_system": 1,
     "level": "beginner",
     "questions": [
       "q_1",
@@ -45,51 +45,51 @@
       [
         "a",
         "b",
+        "c",
+        "d"
+      ],
+      [
+        "a",
         "b",
-        "a"
-      ],
-      [
         "c",
+        "d"
+      ],
+      [
+        "a",
         "b",
         "c",
-        "a"
+        "d"
       ],
       [
-        "c",
-        "",
         "a",
-        "b"
-      ],
-      [
+        "b",
         "c",
+        "d"
+      ],
+      [
         "a",
         "b",
-        "a"
-      ],
-      [
-        "b",
-        "c",
         "c",
-        "c"
+        "d"
       ],
       [
         "a",
-        "c",
+        "b",
         "c",
-        "a"
+        "d"
       ]
     ],
     "correct": [
-      "b",
-      "b",
       "a",
-      "c",
+      "b",
       "a",
+      "b",
       "b",
       "c",
-      "d",
+      "c",
       "d",
-      "c"
+      "a",
+      "b"
     ]
   }
 }
\ No newline at end of file
Index: set_classes.py
===================================================================
diff --git a/set_classes.py b/set_classes.py
deleted file mode 100644
--- a/set_classes.py	(revision a3b9a4363f0c4c8f0330316e01125784d01c83bb)
+++ /dev/null	(revision a3b9a4363f0c4c8f0330316e01125784d01c83bb)
@@ -1,88 +0,0 @@
-import json
-
-FILE_NAME = 'storage.json'
-
-class Test:
-    def __init__(self, test):
-        self.test = test
-
-
-    def check_empty(self):
-        '''Проверяем не пустой ли json и если пустой, добовляем пустой dict'''
-        if isinstance(self, Test):
-            with open(FILE_NAME, 'r+', encoding='utf-8') as f:
-                file_content = f.read().strip()
-                if not file_content:
-                    file_content = {}
-                    json.dump(file_content, f)
-                    return f'Файл пустой'
-                else:
-                    return f'Файл не пустой'
-
-
-    def clear_json(self):
-        '''Чистим json, оставляем пустой dict'''
-        with open(FILE_NAME, 'w', encoding='utf-8') as f:
-            file_content = {}
-            json.dump(file_content, f)
-
-
-    def get_test(self, key_dict):
-        '''Берем из json тест по test_id'''
-        self.key_dict = key_dict
-        if isinstance(self, Test):
-            try:
-                with open(FILE_NAME, 'r', encoding='utf-8') as f:
-                    file_content = json.load(f)
-                    try:
-                        return file_content[key_dict]
-                    except KeyError:
-                        return 'Такого теста нет'
-            except json.JSONDecodeError:
-                return f'Некоректная запись в файле json'
-
-
-
-    def put_test(self):
-        '''Добавляем в json тест, присвоив ему следующий порядковый номер test_id'''
-        try:
-            if isinstance(self, Test):
-                with open(FILE_NAME, 'r', encoding='utf-8') as f:
-                    file_content = json.load(f)
-                    set_key = file_content.keys()
-                with open(FILE_NAME, 'w', encoding='utf-8') as f:
-                    if not set_key:
-                        file_content[1] = self.test
-                        json.dump(file_content, f, indent=2)
-                    else:
-                        set_key = list(file_content.keys())
-                        key_json = int(set_key[-1]) + 1
-                        file_content[key_json] = self.test
-                        json.dump(file_content, f, indent=2)
-        except json.JSONDecodeError:
-            return f'Некоректная запись в файле json'
-
-
-
-class User:
-    def __init__(self, id, is_admin):
-        self.id = id
-        self.is_admin = is_admin
-
-
-class Result:
-
-    def __init__(self):
-        pass
-
-    def get_result(self):
-        pass
-
-    def put_result(self):
-        pass
-
-
-
-
-# TODO: написать механику по созданию теста
-
Index: models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models.py b/models.py
new file mode 100644
--- /dev/null	(date 1715915659487)
+++ b/models.py	(date 1715915659487)
@@ -0,0 +1,20 @@
+class Test:
+    def __init__(self, test):
+        self.test = test
+
+
+class User:
+    def __init__(self, id, is_admin):
+        self.id = id
+        self.is_admin = is_admin
+
+
+class Result:
+    def __init__(self):
+        pass
+
+    def get_result(self):
+        pass
+
+    def put_result(self):
+        pass
Index: interface/choose_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/interface/choose_test.py b/interface/choose_test.py
new file mode 100644
--- /dev/null	(date 1715995786111)
+++ b/interface/choose_test.py	(date 1715995786111)
@@ -0,0 +1,14 @@
+def access_rights():
+    'Проверяем право доступа админ/пользователь'
+    pass
+
+def user_handler():
+    'Интерфейс для юзера'
+    pass
+
+def admin_handler():
+    'Интерфейс для админа'
+    pass
+
+def choice_test():
+    pass
\ No newline at end of file
Index: interface/run_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/interface/run_test.py b/interface/run_test.py
new file mode 100644
--- /dev/null	(date 1715995786106)
+++ b/interface/run_test.py	(date 1715995786106)
@@ -0,0 +1,10 @@
+def runing_test(test):
+    '''Запускаем тест, ответы фиксируем в списке result'''
+    result = []
+    print(f"Тест {test['subject']} начат, {test['timer']}")
+    for i, elem in enumerate(test['questions']):
+        print(f'Вопрос {elem}')
+        print(f"Варианты ответов {test['answers'][i]}")
+        answer = input(f"Введите ответ a/b/c/d: ")
+        result.append(answer)
+    return result
diff --git a/controller.py b/controller.py
new file mode 100644
